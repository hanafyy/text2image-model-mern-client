import { useEffect, useState } from "react";

import Loader from "../components/Loader";
import Card from "../components/Card";
import FormField from "../components/FormField";

function RenderCards({ data, title }: { data: []; title: string }) {
  if (data?.length > 0)
    return data.map((post: any, index: number) => (
      <Card key={index} {...post} />
    ));

  return (
    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
  );
}

function Home() {
  const [loading, setLoading] = useState<boolean>(false);
  const [posts, setPosts] = useState<[] | null>(null);
  const [searchTimeout, setSearchTimeout] = useState(0);
  const [searchedResults, setSearchedResults] = useState<[] | null>([]);
  const [searchText, setSearchText] = useState("");

  const fetchPosts = async () => {
    setLoading(true);
    try {
      const response = await fetch("http://localhost:8080/api/v1/post", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const result = await response.json();
        setPosts(result.data.reverse());
      }
    } catch (err) {
      alert(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  const handleSearchChange = (e: any) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = posts?.filter(
          (item: any) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase()),
        );
        setSearchedResults(searchResult ?? []);
      }, 500),
    );
  };

  return (
    <section className="max-w-7xl mx-auto">
      <h1 className="font-extrabold text-[#222328] text-[32px]">
        The Community Showcase
      </h1>
      <p className="mt-2 text-[#666e75] text-[16px] max-w-[500x]">
        Browse through a collection of imaginative and visually stunning images
        generated by FLUX.1-dev model
      </p>
      <div className="mt-12">
        <FormField
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="Search something..."
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>
      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-3">
                Showing Resuls for{" "}
                <span className="text-[#222328]">{searchText}</span>:
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards
                  data={searchedResults ? searchedResults : []}
                  title="No Search Results Found"
                />
              ) : (
                <RenderCards data={posts ? posts : []} title="No Posts Yet" />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
}

export default Home;
